from django.shortcuts import render,redirect
from app01 import models
from django import views
from django.utils.decorators import  method_decorator
# Create your views here.

def outer(func):
    def inner(req,*args,**kwargs):
        print(req.method)
        return  func(req,*args,**kwargs)
    return inner


class Login(views.View):


#views.View 中的dispatch 方法的作用是 实现调用的分发
#重写dispatch 方法可以实现在请求前做点东西，请求后做点东西
#可以代替装饰器
    def dispatch(self, request, *args, **kwargs):
        print('111')

        #调用父类中的dispatch方法
        ret = super(Login,self).dispatch(request,*args,**kwargs)

        print('222')

        return ret

# 使用装饰器
    # @method_decorator(outer)
    # def dispatch(self, request, *args, **kwargs):
    #
    #     #调用父类中的dispatch方法
    #     ret = super(Login,self).dispatch(request,*args,**kwargs)
    #     return ret




#使用 url 调用类的方式时，在使用装饰器要用@method_decorator(装饰器名)的方式 ， 这种方式是通过反射机制来完成的
    @method_decorator(outer)
    def get(self,req,*args,**kwargs):
        return render(req,'login.html',{'msg':''})

    @method_decorator(outer)
    def post(self,req,*args,**kwargs):
        user = req.POST.get('user')
        pwd = req.POST.get('pwd')
        result = models.Administrator.objects.filter(username=user,password=pwd).count()
        if result:
            req.session['is_login'] = True
            req.session['username'] = user
            rep = redirect('/index.html')
            return rep

        else:
            message = '用户名或密码错误'
            return render(req, 'login.html', {'msg': message})





def login(req):
    # 存储提示信息
    message=""
    # 接收用户数据做判断
    print(req.method)
    if req.method == 'POST':
        user = req.POST.get('user')
        pwd = req.POST.get('pwd')
        result = models.Administrator.objects.filter(username=user,password=pwd).count()
        if result:
            # 将当前username 放到cookie中
            rep= redirect('/index.html')

            # max_age可以设置cookie的超时时间
            rep.set_cookie('username',user,max_age=10)

            #设置加密的cookie
            rep.set_signed_cookie('pwd11','123')
            return  rep
        else:
            message = '用户名或密码错误'
    return  render(req,'login.html',{'msg':message})


def logout(req):
     req.session.clear()
     return  redirect('/login.html')

def auth(func):
    def inner(req,*args,**kwargs):
        is_login= req.session.get('is_login')
        if is_login:
            return  func(req,*args,**kwargs)
        else:
            return redirect('/login.html')
    return  inner


@auth
def index(req):
    # #如果用户已经登录，获取当前用户名
    # #否则返回登录页面
    # username =req.session.get('username')
    #
    # #获取加密的cookie
    # # pwd = req.get_signed_cookie('pwd11')
    # if username:
    #     return render(req,'index.html',{'username':username})
    # return redirect('/login.html')
    current_user = req.session.get('username')
    return render(req,'index.html',{'username':current_user})
@auth
def handle_classes(req):
    current_user = req.session.get('username')
    return redirect(req,'classes.html',{'username':current_user})


def handle_classes(req):
    pass

def handle_teacher(req):
    is_login = req.session.get('is_login')
    if is_login:
        current_user = req.session.get('username')
    pass





def js_cookie(req):

    obj = render(req,'js_cookie.html')
    obj.set_cookie('name','xiaoqiang')
    return obj